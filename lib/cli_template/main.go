// Code generated for package cli_template by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/cli/CHANGELOG.md
// templates/cli/LICENSE
// templates/cli/Makefile
// templates/cli/README.md
// templates/cli/cmd/hello.go
// templates/cli/cmd/import.go
// templates/cli/go.mod
// templates/cli/lib/main.go
// templates/cli/main.go
package cli_template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _changelogMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xbd\x4e\xec\x30\x10\x46\x7b\x3f\xc5\x48\x69\xee\x4a\x57\xf6\x42\x49\xb7\xa2\xa4\xe3\xaf\x89\xb6\x70\xec\x6f\x63\x83\x3d\x13\xd9\x43\x78\x7d\x14\x02\x02\xba\x99\xa3\xd1\x99\x33\xd0\x6d\xf2\x3c\xa3\xc8\x6c\x4e\xa5\x10\x8b\xfa\xa9\x80\xc2\x27\xed\xa4\x42\x9a\x72\xa7\xa5\xc9\x0b\x82\xd2\x7b\x2e\x85\x26\x50\x94\xf0\x56\xc1\x8a\x48\x99\xf7\x93\x4b\x2e\xb0\xc6\x3c\x26\xd0\x45\x5a\xf5\x4a\xb9\xd3\xe4\x3b\x22\x09\xd3\x78\x07\x2c\xe4\x7f\xde\x9d\xff\x25\xd5\xa5\xdf\x38\xf7\x0a\x2c\x3e\x7c\x73\x1b\xa4\x3a\xb0\xbb\xb2\x47\x7b\x74\x87\xff\xc6\x73\xfc\xdb\xe0\x63\x42\xdb\xdb\xc6\x07\x54\xcf\x9a\x03\x3d\xa3\xf5\x2c\x9c\xf9\x97\xb8\xa3\xae\x68\x56\xda\xec\xfa\x82\xe0\xd6\xeb\xcd\x69\x93\xd6\x72\xb0\xc6\x0c\x03\x8d\x4f\xdc\x50\xb0\x45\x9e\x37\x30\xd0\x29\x46\xc4\x7d\xdc\x53\xbf\x96\x7b\x54\x59\x11\xcd\x47\x00\x00\x00\xff\xff\x58\xa7\x3a\x37\x31\x01\x00\x00")

func changelogMdBytes() ([]byte, error) {
	return bindataRead(
		_changelogMd,
		"CHANGELOG.md",
	)
}

func changelogMd() (*asset, error) {
	bytes, err := changelogMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "CHANGELOG.md", size: 305, mode: os.FileMode(436), modTime: time.Unix(1627483551, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _license = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5c\x5f\x8f\xdc\x36\x92\x7f\xe7\xa7\x20\x06\x38\xec\xcc\x42\x56\x3c\x33\x76\x76\x37\x8b\x7b\xf0\x26\x4e\xce\x80\x6d\x04\xeb\xe4\x82\x7d\x64\x4b\xa5\x6e\xc6\x14\xa9\x90\xd4\xb4\x7b\x3f\xfd\xa1\xaa\x48\x8a\x52\xf7\xf8\xcf\xc1\x07\x5c\x3f\x6c\xc6\xdd\x62\x91\xf5\xff\x57\xc5\xd2\xbe\x71\xff\xd6\xc6\x28\xf9\xf3\xbc\x33\xba\x93\xaf\x75\x07\x36\x80\xfc\x6f\xf0\x41\x3b\x2b\xef\xda\xa7\xe2\x3f\x3f\xf9\x11\xe2\xb6\x95\x3f\xc0\xa0\xad\x8e\xda\xd9\x20\x9e\xac\x3e\xf8\xf3\x6d\x2b\xaf\xbe\x77\x36\x7a\xbd\x9b\xa3\xf3\x57\x42\x4a\x29\x47\x50\x36\x48\x50\xdd\x41\x6a\xdb\xeb\x07\xdd\xcf\xca\x48\xe7\xa5\x81\xbd\x32\x12\x6c\xd4\xf1\x24\xe3\x41\x45\xd9\x79\x50\x11\x42\x23\xbb\x4c\x04\x82\x8c\x8e\xc8\xc4\x03\xf0\xef\x78\x62\x37\x34\x48\xc1\x1d\x6d\x90\xdf\xbb\x07\xf0\xd0\xcb\x77\x6e\x88\x47\xe5\xa1\xc5\x93\xdc\xad\x4f\x92\x59\xad\x4f\x44\x04\xdd\xb8\xd3\x36\xd3\xa4\xaf\xca\x2a\xe4\x11\xbf\x74\xf1\x00\x3e\xc8\x6b\x3d\x48\x65\x4f\x37\x72\x0e\xd0\x13\x99\xdd\x49\x2a\x59\x6f\xa2\x6c\xcf\x7c\x4c\xca\x47\xdd\xcd\x46\xf9\xfa\xf7\x3f\x85\x15\x71\x3a\xe7\x7d\x7d\xce\xcd\x01\xb7\x8c\xe1\x61\xd4\x23\xb4\x89\xd8\x33\x22\xb6\x5e\x54\x13\x7c\xe7\x66\xdf\x21\x87\x3d\xc8\x1f\x9d\x1f\x65\x74\xf2\x78\xd0\xdd\x81\x18\x27\xbd\x2a\xb3\xe2\xe8\xa0\x82\x54\x31\xaa\xee\x90\x78\xc6\x07\xad\x8b\xba\xc3\xe7\xe5\xcb\x0f\x07\xbd\xd3\x51\xbe\x68\xe8\x87\x97\x1f\xa0\x9b\xa3\xda\x99\x44\xde\x0d\x32\xcc\xdd\xa1\xde\x97\x88\xe0\x8f\x0d\x49\xeb\x8d\xeb\xf5\xa0\x3b\x55\x84\xbd\x7d\x3e\x3d\xab\x2d\x1b\x50\xa7\x02\x93\xd0\xb6\x33\x73\xaf\xed\x5e\x4e\xce\xf3\x6a\x54\x13\xb8\x81\x24\xf1\xbc\x95\x57\xaf\x6c\xe7\xc6\x49\x45\x8d\xe7\xf9\x4d\xc7\x83\x7c\x07\x9d\xb3\xbd\xf2\xa7\xec\x01\xa1\x92\x8e\xa0\x3f\xaf\xd5\x0d\xab\xf0\x73\x24\x52\x4b\xa3\x87\xd0\x79\xbd\x4b\x62\xe2\x23\x16\xf9\xfc\x03\x25\xcd\xc6\xb5\xd6\xce\xdf\xa5\xf3\x69\xe3\x5d\xb5\xf1\x99\xe6\x8f\x2a\xc8\x51\xf5\x20\xd5\x83\xd2\x86\x24\x3c\xdb\x1e\x3c\x3d\x1d\xc1\x8f\x28\xbc\xb2\xf3\x43\xf2\xeb\xdb\xf6\x16\xbd\x04\x94\x37\x1a\x7c\x36\xf0\xc4\x7b\x23\x77\x73\xc4\xd3\x4b\x65\x82\x5b\xc8\x15\x2a\x99\xac\x54\xe7\x82\x23\x21\x7f\xdb\xca\xab\x8d\xca\x6b\x6b\x53\xf6\x24\x87\x64\x06\xb8\xef\xd1\xf9\xf7\xec\x4c\xc8\xa8\x3d\xd3\x32\xd1\xfc\x4b\x2b\xaf\x5e\x2b\xbf\x07\x2f\x7f\x73\xfe\xfd\x8a\x1e\x53\xe0\x40\x41\x7e\x0b\x17\x7c\xe4\x88\x8a\xe6\x5d\x46\x15\xc1\x6b\x65\xd0\x7c\x88\x8e\x92\x01\x26\xe5\x55\x04\x39\x68\x03\x28\x1b\xfc\x6f\x68\x98\xa8\x0e\x24\x8e\x8b\xf1\xe4\xaf\x78\x2e\xe6\x7d\x1d\x43\x74\x90\xbd\xeb\xe6\x11\x6c\xa4\x07\xff\x56\x1e\x44\xa1\xd4\xcf\x1e\xd4\x03\xda\x2b\x8a\xc2\xeb\xfd\x21\xa2\x4d\xec\xbd\xb2\xb1\xc9\xd6\x31\xaa\x0f\x7a\x9c\x47\x09\x1f\x22\xd8\x28\x27\x17\x02\x1a\x6f\x43\x44\x8e\x07\x20\xae\x92\x89\x44\x3d\x42\x96\x6c\xb6\x53\xa2\x86\x5c\x85\x79\x17\xe0\x8f\x19\x6c\x34\xa7\x86\x14\xa1\x2c\x1b\xa6\x32\x26\xaf\xa2\x43\x04\x0c\xb5\x0f\x70\x82\x1e\xc3\x19\xb1\x53\xab\xf8\xf6\x69\x2b\xaf\x56\x4e\xba\xd5\x70\x22\x36\x38\x63\xdc\x51\xdb\xfd\x77\x8b\x1f\x91\x01\xa0\x9c\xf5\xb9\xb2\x59\xe2\x1e\xc2\x6c\x62\x90\x83\x77\xa3\x54\x56\xaa\xbe\xa7\xdc\x22\xa3\x6b\x8a\x1d\xf6\x60\x80\xbe\xc4\xa7\x28\xec\x8f\xd5\x81\xf2\x01\x30\x63\x80\x8d\x64\xb0\x49\x83\x85\xc2\x65\x6f\xc3\xe3\x59\x38\x7e\xe2\x88\x48\x57\xe9\xc4\xec\x63\x84\x59\x56\x98\xfd\x7e\x56\xa4\xba\xef\x8d\xd2\x63\xb8\x62\xef\xa9\xc2\xc7\x46\x78\x13\x3f\xdd\xe1\xd3\xd7\xe1\xa6\xa9\xc2\x1a\xda\xb1\x9b\xa3\x34\x7a\xd4\x91\x38\x6d\xe4\x08\xf1\xe0\x7a\x96\xcc\xe4\x5d\x07\x21\x70\x18\x55\x13\x99\xf5\x1c\x98\x54\xa0\x80\x59\x6d\xb0\x18\x24\x6a\x19\x63\x2c\xd1\xa8\xe3\x1a\x31\x7b\x74\xb3\xe9\xe5\x0e\xc5\x31\x78\x6d\xf7\xd0\x73\x94\x18\x1c\x47\x9a\x64\x60\x43\x89\x13\x4b\x2c\x39\x25\x0b\x7e\xaf\xed\xbe\x91\x73\xa0\xff\x04\x30\x86\xfe\x70\xc3\x00\x48\x90\x28\x05\x65\xa0\x49\xee\xc0\x02\x51\x3d\x34\x52\x8f\x18\xca\x49\xc1\xd1\x2b\x1b\x06\x0e\x59\xa0\xc9\xec\x75\x0c\xdb\xd4\x4c\x5f\x9e\x31\x92\x32\x3d\xab\x04\x61\xc0\x59\xf0\x5a\xc1\x12\x9d\x02\x12\xc8\x9f\xde\xfe\x2a\x7f\x02\x0b\x5e\x99\x0d\x50\x6a\x6a\xa4\xd4\xe4\x87\x59\x00\x10\x02\xf8\xcf\x58\x77\x5b\xd6\xc9\x17\x28\x0c\x97\xd7\x10\x99\xc7\xd6\xdd\xe3\x7e\x84\x2c\x4e\xd2\x60\x38\xcb\xb1\x3d\xb0\x16\x5c\x4a\x87\x26\xe5\x33\xe6\x1a\x41\xc5\xd6\x9a\xb7\xc8\xe7\x2c\x32\x4f\x1e\x06\xf0\x18\xf8\x50\x47\xac\xc8\x95\xa7\x25\xe2\x08\x32\xfe\xe5\xe6\x2b\x79\xed\x3c\xfd\xe5\xaf\x6e\x56\x66\xbd\x41\x79\x6a\x8d\xf3\xe0\x03\xf8\x4e\xa3\x79\xe4\x00\x94\x33\x8f\x0e\xb5\x49\xb5\x78\xea\x7a\xa9\xc6\x38\xcd\x3b\xb3\x97\x00\xfb\x50\x85\x1f\x69\x3d\x41\x47\x67\xd0\x07\x42\xfe\x87\xa1\xf0\x46\x92\xd4\x79\xc3\xce\x8d\xa3\xb3\xf9\x09\xce\x1b\xff\x72\x33\xed\xcb\x1e\x36\xfb\xc9\x05\x48\x92\xc6\x38\x5f\xb0\x6f\x23\xaf\xd2\xba\xab\xc4\x36\xe3\x06\x90\x93\x3b\x82\x6f\x64\xaf\x3d\x74\x7c\x1e\xdc\xd3\xf2\xbf\x29\xd0\x77\x6a\x0e\x40\xcf\xf2\x97\x14\xc3\x50\xe0\x56\xed\x01\xd3\x48\x81\x41\xcc\xd9\x3a\xfa\xef\x4e\x7c\x62\xd5\x51\xa0\xa7\x44\x77\xd4\x68\x32\xce\x53\x54\x73\x47\x0b\x3e\x1c\xf4\x84\x64\x46\xe7\x81\x92\x2d\xd1\x18\xf4\x10\x4f\x72\x02\xdf\xe1\x2e\xd7\xcf\x9f\xfe\xc7\x4d\xb6\x00\x37\xc7\x10\x95\xa5\xc8\x13\x0e\xca\x03\xb9\xd7\x0e\x2c\x0c\xba\xd3\xc9\x48\x57\xa4\xab\x13\xb6\x42\xdc\xb5\xa5\xa8\xf8\x09\x63\x44\xa0\xb0\xf4\xbd\xb3\xfd\xc5\x5a\xe1\xfc\x83\x24\x6e\xdb\xb4\x58\x88\x97\x08\xf6\x56\xb0\x0b\x3c\xec\x4e\x1c\x80\x02\xea\x89\xe1\x80\xe9\x9f\x1c\x35\x06\x0f\xef\x4e\xca\xc4\xd3\x93\xc1\x03\x34\xc2\x3a\xfb\x04\x3e\x74\x66\x0e\xfa\x01\xb2\x73\x7c\x27\x04\x6a\x89\xb5\xaf\x6d\x04\x63\xa0\x8b\x68\xa5\x93\x77\x13\xf8\x78\xca\x16\x79\x5d\xa1\x94\x14\x41\x39\x28\xf5\x30\x2a\xff\xfe\xa6\xb2\xd3\x3a\xa6\xae\xe3\xa9\xc3\x42\xa1\x91\x1e\x26\xef\xfa\xb9\x83\x06\x7d\xaa\x02\x70\xac\x57\x72\xb0\x13\x1a\x4c\x98\x8c\x3a\x35\xa8\x9e\x81\x20\x6f\xaf\x43\x2a\x81\x38\xc6\x17\x55\x4b\xf8\x30\x19\xa7\xe3\x79\xf4\x43\x49\x37\x39\xa4\x39\xcc\x00\x72\xb6\xec\xc2\xe8\x00\x2a\xe8\xd0\xb0\xa1\xaf\x52\x3a\xda\x0e\x83\x83\x40\xd5\x05\x67\xad\x0a\x85\xfd\x9d\xe0\x83\x40\xf3\x62\xe9\xad\xb2\x5c\xb1\x86\x0d\xfb\xc8\x6e\xc3\x42\xc0\x3c\x90\x92\x00\x5b\x62\x9d\x05\x60\x13\xff\xd7\xcc\x96\x54\xb0\xe4\x81\x73\xa6\x53\x2e\x78\x24\x0f\xdc\x61\x35\xf8\x72\x18\xd0\xd9\x1e\x40\xfe\xa0\x22\x08\xf1\xcb\xa1\x18\x46\x60\xb3\x82\x9e\x50\x40\x72\xc9\xbb\xf6\x96\x45\xe5\x21\x4c\xd0\x11\x5a\x63\x08\xb0\xec\x2b\x76\xd0\xb9\x11\x24\x14\xda\x03\xc1\xed\x5a\x16\xe4\xde\x96\xfd\x1d\x81\xe7\xaa\xc4\x24\x00\xea\x43\x14\x8b\xb2\xc3\x46\x96\x99\x85\x7b\xf4\xb0\x0c\x05\x02\x92\x24\x5f\x91\xef\x3a\x37\x7d\x84\x1d\x0a\x5c\x85\x27\xa9\x3c\x9f\xc0\x59\x53\xac\x3d\x3f\x4d\xaa\x15\x2b\x08\x28\xdf\xba\x82\xc9\x94\xc9\x0b\x30\x2e\xe7\xad\x8e\xda\x18\x02\x0c\xe3\x64\xd0\xc8\x08\xc9\x21\x3a\x28\x1c\xa5\xf8\xc6\x2b\x30\xbe\x2c\x00\x6d\x41\xed\x4b\x0e\x58\xe0\xe7\x5b\x17\x51\x01\x25\x2e\x55\x9a\x21\xf8\xb6\x73\x0f\xd0\x48\xeb\xb2\x8b\xa6\x33\x61\x84\xcf\x2c\x61\x85\x2e\x2a\x69\xa7\x10\x30\xa4\x8c\xda\x61\x72\x24\xe0\xa3\xce\x6a\x3c\x0f\xa3\x7b\xc8\x0c\x9d\x95\x6d\x29\xb2\xb3\x4f\x0c\x14\xe2\x19\x30\x8d\x84\x41\x29\xc6\xe3\xf6\xdf\xc9\x6b\x7d\x83\xe1\x8a\x9b\x03\x04\x98\x53\x6c\xd1\xbe\x27\x6f\x3b\xfd\x29\x2c\x91\xa0\x2e\x85\xb7\x9b\x72\x88\xd7\xfa\xe6\x52\xe7\xe2\xb2\x5b\x54\xc5\x50\xc8\xa2\xbe\x86\x0f\x1d\x4c\xb1\x76\xf6\x8d\xeb\x10\xa1\xe4\x3e\x37\x8c\x99\xaf\xbb\xcb\xae\x5f\x70\x22\x8a\xfa\x4c\xab\x9a\xed\x5e\xed\x02\xd8\x0e\x72\x85\x7a\x86\xe4\x5a\x34\xdf\x45\xf3\xb2\x77\xc0\x95\x18\xc3\x4d\x14\x5a\xb2\xbc\x44\xb0\x44\xe2\x80\xa1\xc5\x3f\x60\xfd\xcd\xff\x14\x68\x69\x6e\xef\xb8\x6e\xad\xdd\x15\x65\xb7\x70\x3e\xaa\x13\x5a\xad\x05\xc4\xd0\x08\x0d\x31\x31\xbb\x71\x32\x27\x92\x99\xa8\x0a\x7b\x0f\x7f\xcc\xda\x27\xc5\x56\x01\xe2\xbe\x7d\x76\x43\x9e\xf9\xac\x95\xef\x4a\xbd\x55\x3a\x0b\x42\xbc\x75\xab\xdd\x31\x1c\x86\xda\x9b\x52\x2e\x53\x58\xd9\x72\x21\x84\x87\x26\x5b\xe9\x0e\x0e\xb7\x8e\xae\x0a\x0c\x97\x1b\x03\xac\x14\x55\x55\x7c\xa5\xfa\x4f\xb0\x45\x64\xb1\x5e\x07\x80\x72\xfa\xdb\xa7\xed\xdd\x0d\x1a\xd4\x79\x1b\xe1\x52\xbd\x2f\xaf\xf5\x20\x26\xf0\xa3\x8e\x25\x54\xac\x17\x2d\x62\xb9\x67\xb1\x3c\x6f\xe5\x3f\x61\xf2\x10\xc0\x72\xd0\xba\x90\xd5\x7d\x7e\x20\xd4\xbd\x8f\xe5\xf7\x1d\x18\x0d\x0f\x10\xc8\xbc\xd7\xa6\x4d\xf6\x45\xc1\x48\xef\x35\x8a\x33\xf7\x06\xaf\xc3\x0d\xa7\x03\x72\xe3\x30\x0f\x88\x60\x50\x2e\x6c\x43\x22\x57\xdd\x75\x0d\x1c\xdd\x85\xfa\xe2\x23\x85\xf1\x5d\xfb\x6d\x2b\x7f\x54\xda\xcb\x5f\x03\x6c\xac\x37\x75\x11\x10\x60\xd8\x1e\x7a\xa4\x4d\x35\x5c\x6d\xc7\x88\x5f\x28\xf3\x71\xcc\x55\xd3\x64\x74\x47\x50\xa2\x73\xd3\x89\xbb\x03\xbd\xeb\xa2\xa7\x1e\x87\x1b\xe4\x80\x7b\x51\x2a\xa5\xbf\x7a\x50\xa9\xae\x4a\x10\x50\xa0\x91\x3e\x28\x83\xa2\xa4\xf3\xfd\xa5\xad\xd1\x97\x48\xda\x09\xf2\x1e\x0b\x91\xfb\xf6\x0e\xff\xe7\x9e\x73\xed\x7d\xfb\x8c\xa4\xd9\x95\xe7\x33\x2a\xdc\x26\x14\xb1\xce\x8f\xad\x10\xf7\xa8\xe4\x30\x39\x1b\xf4\x4e\x1b\x02\xe9\x97\xa0\x1e\x3e\x78\xdb\xca\x1f\x56\x39\x61\xc8\x15\x37\x96\x27\x42\xbc\x30\x46\xf6\x9b\x07\x2e\x45\x94\x4b\xcd\xc1\x5c\x34\x2b\x7b\x12\xeb\x96\x22\x99\x15\x8a\x9b\x5b\xcb\x92\xa1\x09\x37\x3d\xe9\xeb\xd2\x68\x6e\xe4\x38\x87\x88\x51\x21\x27\xc2\xca\xba\xd7\x59\x11\x17\xd2\xc3\xda\x52\x19\xe5\xa1\xd3\x93\x5e\x9b\x31\x1f\x53\x2c\xdd\x84\xd2\x5e\xde\xb2\x14\xe4\x1e\xbf\xb3\xd9\xd2\x36\xdb\x8a\x52\x14\xa2\xb2\x0e\xee\x88\x8f\x9c\x64\xa7\xac\x74\xbb\xa8\xb0\xd0\x27\xab\x79\xe4\x98\xea\x84\xe6\x28\x54\x8c\x30\x4e\x8c\x62\x0c\xd6\x91\xe4\x7d\x28\xed\x2e\x79\x42\xe1\xe1\x4f\x9b\x68\x5b\x77\x6f\x53\x9f\xee\x1e\x11\xd5\x56\x9b\x9b\x56\xa0\x10\xaf\x28\x9a\x55\x40\xf6\xa2\x3e\xb7\x4d\xe3\x78\x00\x9b\xf2\x74\x42\x42\x9b\x35\x24\x79\xea\x59\xee\x60\xdb\x14\x5d\xdb\x47\xdd\x6c\x0e\x4b\x87\x76\x1d\xc5\x6f\x59\xb0\x1f\xd1\x69\xca\x5b\x97\x3a\xdc\x1f\x57\xc7\xa3\xcd\x6f\x54\xb4\x07\x15\x9c\x25\x52\x5c\x42\xd2\xd2\xa8\x47\x30\x27\xac\x06\x2d\xd6\x91\x04\x4d\xba\x03\x42\x71\x44\x3a\x58\xcf\xa5\xb3\x28\x9b\x60\x40\xa0\xb4\xb1\xf2\x9c\xd4\x4e\x2c\x2c\x54\xf8\x3d\xdb\x44\xa5\x14\x3a\xe5\x96\xb1\x0b\x11\x7e\x5b\xa1\x37\xa9\xd3\x58\x70\x57\x4c\xab\x7a\x8d\x40\x1f\x43\x2e\xad\x6d\xb0\xbe\x7a\xd0\x14\x0b\x93\x77\xd4\x3d\x8b\xd2\x5c\xda\x1e\xa1\xc0\x80\xca\x76\x39\x92\x22\x7c\x43\x23\x2e\x6a\xf9\x2c\xe3\x5d\x33\xb6\x8a\xe7\xf7\x08\xaf\xb7\xf6\xbc\x2a\x81\x84\xc8\x92\x4b\x81\x04\x6d\xa6\x12\xe2\xea\xe1\xbc\x49\x96\x5c\x95\xd3\x1b\xb1\x16\x06\x55\xb2\x68\xcb\x15\xfa\x48\x2c\x55\xb0\x63\xe3\xda\x28\x32\x71\x29\x98\xb4\xf2\x55\xea\xf1\x57\x87\xd1\x81\x4c\x72\x05\x17\x73\x23\x73\xdd\x36\x4f\x1d\xf6\x3a\x1c\x39\x0b\xdc\x71\xf5\x70\xe1\xfa\xa4\x49\x57\x5e\x18\xe7\xce\xc3\x1a\xea\xee\x73\x2e\x61\x9a\x35\x4e\x61\x98\xc1\x49\x32\xd6\xf5\x87\x39\x37\xdb\xed\xb6\xe2\x82\xdd\xb2\x17\x6e\x77\xa5\x76\x6b\x70\x4b\xc0\x2e\x36\x84\xfe\xbe\x95\xe1\x88\xa5\x39\x3f\xa8\xbd\x74\x13\x37\x81\x86\xd9\x13\xb6\xbe\x0c\xd2\xc4\x59\x75\x53\x1d\xaa\xf4\x1d\x2b\xad\x92\x3b\xd5\x67\x15\xcb\x59\xc9\x48\x9f\x61\x41\x86\xa0\x34\x2c\xe6\x88\x42\xe6\x5a\xa5\xb8\x05\xed\x84\x80\x30\x2a\x86\xdd\xdc\x3e\x4c\xbb\xd8\x44\xe1\x7a\x49\x9b\x0b\xe8\x48\x3f\x36\xb9\xa6\x2a\xff\xee\x75\xa0\xd6\x32\x78\x3a\xfe\x51\x79\x84\x04\x27\x06\xdc\x75\x5d\x3a\x48\xa3\x15\x61\x81\xd3\x4d\x6e\x9e\x43\x4f\xf6\xf5\x98\x4b\x26\x79\x9f\xd7\x3b\x09\xaf\x17\x47\x41\x7e\x99\xc3\x0b\x0c\x21\x5a\x46\x32\xe9\xf2\x24\xf9\x0f\xe1\x2f\x74\xa3\xfe\x24\xdf\x5b\x77\xb4\x72\x50\xdc\xf4\xd1\x56\x75\xdd\xec\x55\xa7\xa9\x6d\x7a\x8f\x80\xf5\x05\x03\xb1\xec\x25\x2f\x16\xb0\xfe\x0b\x2a\xae\x0a\x02\x07\xe7\x02\x02\x74\x6e\x6a\x24\x3f\x70\x39\x54\x2b\x39\x00\x79\x69\xb3\x48\x4a\x86\x79\xa2\x06\x87\xd0\xb6\x87\xd1\xea\x78\xe2\xba\x38\x49\x4b\xba\x9d\xd1\xfb\x0c\x5b\xdc\xca\xf3\x56\xc9\xe8\xcc\xbe\x5a\xf9\x5f\xee\x08\x0f\x78\x8c\x12\xde\x1d\xda\x36\x55\xf9\xce\x72\xfc\x41\xde\x77\x70\x50\x66\xe0\xd3\xa2\xe1\x50\x0b\x03\xbf\xba\x50\x2e\x55\x30\x87\x1a\x57\x88\x60\x77\xc1\x99\x39\x62\x82\xea\x0c\xa8\x74\x69\x80\xa0\x8b\xec\xf6\x9c\x55\x59\x58\x6d\x1e\xe3\x15\x03\x05\xc9\x90\xe2\x8d\xe0\x78\xe8\x2c\x2c\x59\x39\xb5\xfe\xd4\xde\x03\x49\x3c\xd1\x1c\x4e\x12\x79\x5e\x97\x78\xa9\xb2\x17\xcb\x4e\xda\x76\xb3\x67\xe2\xe7\x5d\xaa\x4d\xed\xf5\xf9\xba\x62\x3f\xc6\xd3\xd1\xd9\x17\xac\x95\x5a\xd3\x55\xd4\x12\x8f\xb8\x0e\xf1\xf7\x98\xeb\xc8\x30\x41\x87\x30\x36\xb5\x9d\xc4\xef\xb3\xd7\xa1\xd7\x5d\xea\x07\x3d\x6b\xe5\x2b\x5b\x0e\x83\x85\x26\x65\x8f\x1f\x66\x92\xd0\xbb\xa8\xe2\xcc\x60\xf7\x9f\xb0\x9f\x0d\x97\x5f\x9f\x6a\xc1\x5e\xc4\xed\xaf\x06\x54\xbc\x0e\xd4\x9d\xe3\xeb\x48\x12\x72\x0a\xce\x75\xd6\xaa\x6e\x03\x2f\x02\xd8\xb3\x76\x5a\x70\x63\x0a\x5a\xe6\x51\x74\xdc\x13\x47\x22\x30\x47\x8d\xfc\x7d\xee\xa9\x21\x2d\x9d\xef\xd1\xe0\x09\xc6\x66\x16\x09\x3b\x16\xb3\xfd\x8e\x9a\xf2\xdb\xaa\xfe\x22\xa4\xff\xc4\x05\x2c\xe1\x27\x79\xbd\xbb\x11\x19\x43\xa6\xf2\x68\x51\x5e\xca\x83\xb9\xa5\x04\x27\xa9\xa8\x29\xd8\xca\x77\x68\x74\xbc\x8e\xd2\x06\x9d\x4d\xec\x40\x4e\x46\x75\x0c\x46\x95\x8c\xf0\x21\xe6\x8b\x48\x32\xa0\x3e\xc9\x74\x53\x14\x85\x8d\xa0\xce\x73\x4c\x5d\x00\xbc\x4c\xf1\x93\x99\xcb\x4c\x79\x47\x43\x09\xc9\x25\x58\xb0\x62\x25\xc7\x86\x3d\x65\x7b\x68\xc4\xdb\x4b\x3d\x8d\xd9\x18\xa2\xd2\x26\xdd\x18\x29\x51\x67\x50\xd4\x8f\xb6\x98\x6f\xc3\x7b\x6d\x0c\x9e\x61\x07\x92\xc0\x5d\x4c\xc3\x06\xd4\xd8\x93\x3a\xb6\x42\x3c\x6f\x29\xc0\x26\x80\x72\x36\x58\xf4\x1c\x8b\xc7\x5f\x96\x72\x7d\xd5\xb1\x5c\x2b\x92\xfa\x91\x31\xd1\x02\xa9\xe6\xe8\x46\x15\x75\x87\xe8\x41\x68\x2e\x48\x06\xa5\xcd\x23\xc6\x8b\xb8\x83\x2c\xa4\x8a\xa9\x69\x15\xf7\x7a\x05\x2d\xd2\x7c\x6b\x8f\xd6\x16\x3f\xeb\x58\x7c\xc1\x5d\xcd\xee\x88\x55\x18\xa2\x10\xaf\x2d\x2a\x03\x7a\x32\x5b\x42\x89\x21\xc1\x9e\x46\xce\xd6\x40\x60\x2b\x9b\x6d\xd4\x86\xef\x70\x6b\x1a\xf0\x01\x53\x97\x46\xb5\xe0\x53\x83\x66\xc0\x54\x44\x11\x38\x0b\x70\xd3\xa9\xc9\x06\xcd\xb7\x04\xc2\xd9\xbd\x43\x20\x90\xae\x08\xf4\x85\x86\x3e\x0a\x8d\xf2\x12\xa6\xdb\xe1\x94\x62\x1f\x61\x3f\xeb\xec\x93\x2c\x96\x8e\x6f\x43\xd0\xb3\xcf\x0a\x9c\xc9\x6b\x2e\xbf\xbf\x7d\x2a\x7b\x75\x0a\x52\x0d\x98\xcb\x73\x33\x44\x50\x2f\x7d\xa7\xba\xf7\x52\xdb\xac\x1e\x22\xd9\xca\x37\xce\x83\xcb\x19\x2e\x73\xf1\x65\x52\xe5\xfb\x90\x15\xa7\x97\x18\x15\xc4\x9f\x86\x50\x71\x28\x3f\x93\x43\x06\xb2\x18\x2d\x51\x2c\xd4\xd9\xe7\x39\x8d\xd2\xef\xf1\xd0\x81\x7e\x80\x3e\x37\x17\xdd\xb0\xa5\x9d\x0a\x80\xc5\x76\x04\x71\xb9\x3d\xe6\x92\x1e\xd3\x1d\x44\xb1\xcb\x45\xcc\xf7\xb5\x98\x05\x09\x8e\xf6\x9f\xe2\xc2\x17\x9e\x82\x1c\xf0\x8e\x6a\x07\x24\xc8\xd3\x24\x11\xe3\x5b\xcc\x49\x5a\xed\x15\x0a\xb2\xbe\x70\xc5\x94\x1c\x02\xf8\x48\x8d\x97\x04\x18\x45\xdd\x07\xe7\x61\x04\x6a\xbb\x26\xa0\xd9\x43\x67\x94\x57\xd1\xf9\x13\x46\xf2\x3d\x3d\xa5\xb8\x35\xd5\x88\xce\xcd\x36\x82\x7f\x92\x67\x18\x90\xc3\xce\xbb\x10\xd2\x37\x37\x18\x0e\x61\xcf\x43\x34\x67\x4d\xfb\xd4\xb0\x16\x7c\xab\x6a\x4e\xf5\xc5\xab\x39\x95\x4e\x75\x3d\x78\xf1\xb8\x0b\x47\x47\x48\x04\x79\xe4\xe1\x19\x8a\xc4\xd5\x76\xa1\x94\xad\x8f\xb4\x64\x53\x83\x41\xdc\xb5\xb7\x67\xd9\x26\x1c\x54\x1d\xa5\x48\xfe\xf7\x98\xd1\x39\x4e\x3f\xa4\x10\x1a\x97\x90\xb8\x26\x1a\xe4\x73\x9e\xec\x7a\xde\xde\xe5\x7b\x10\x65\x8c\x00\x0c\x0f\x01\xca\xf5\x0c\x63\x26\x2e\x21\x6b\x2d\xe4\x84\x82\x6c\x20\x6f\x1e\x02\x18\x03\x3e\xdc\x70\x67\x4c\x90\xad\xee\x00\xac\x7c\x50\x46\xf7\xe6\x54\xdf\xa8\x90\x5f\x78\x76\xc4\x15\xa9\xf3\xb8\x27\x8a\x2d\xd6\xbc\x30\xfb\x61\xf6\x0f\xfa\x01\xea\x5f\x5a\x21\xfe\xfc\x95\x3e\xe2\xcf\xf2\xab\x7c\x88\xd0\xb7\xd4\x1c\x48\x20\x0e\x35\xf3\x5b\xc6\x70\x5f\x48\xe8\x51\xa0\xf5\xa5\x84\xbe\xc6\x87\x08\x5d\xaa\xdb\x4b\x87\xe2\x42\x22\xe3\x28\x7a\xa5\x30\xca\x5d\xd5\x84\xaa\xdb\x65\x37\xc7\x05\xe5\xa6\xc2\xe2\xbd\xb6\x7d\xb9\x9a\x86\x0f\x93\x87\x10\xa0\x6f\xf2\xbd\x21\x01\x39\x26\xc4\x88\xc4\xf9\x53\xd5\xd8\x6d\x2e\x8e\x43\xa5\x3d\x30\x56\x97\x2a\xfe\x13\xac\x0d\x58\x43\xb8\x41\xf6\x80\xe0\x2c\x34\x72\x04\xdf\x1d\x94\xa5\xb6\x53\x23\x07\xcd\xb3\x4e\x6a\x25\xa3\x6a\xe2\x36\xcd\x84\xe0\x69\x31\x6e\xa7\xa0\xa2\xed\x9e\xf1\x09\x86\x46\xcc\x3a\x3a\xbc\xc7\xda\x22\x01\xaf\x42\xe8\x8f\x59\x11\x60\x47\x9f\x4b\xf7\xfc\xb9\x42\x7f\xac\x35\xbc\x8c\xa5\xd4\x27\x7a\x77\xa0\x41\xad\x6a\x24\x6d\x59\x84\xda\x83\xc4\x20\xfa\x57\x9a\x04\x4b\xb8\x9b\x4b\xc4\x42\xe8\x9a\xfa\x6b\xeb\xc2\xef\x06\xe3\xfa\x3c\xc2\xaa\xbf\xc8\xc3\x72\xf9\xb6\x8c\x2f\xdd\x48\x31\x89\x90\x87\x49\x69\xc6\xe3\x9d\xf3\x69\xae\x05\x85\xa2\x43\xd5\x3b\x58\xd5\x3f\x9d\xb3\x21\xea\x48\x77\xde\xca\x66\x42\x68\x17\x96\xa6\x19\xf3\xed\xe4\xd9\x8d\xf4\x1c\x60\xa9\x57\xcf\x45\x96\x08\xa9\x39\x1e\x9c\xd7\xff\xbe\x6c\xc7\xa9\xb5\x50\xfd\xb2\x9c\xb2\xfd\x3f\xf1\xb5\xaf\x15\xd8\xfe\x7f\x86\xc8\xbf\xd4\xe3\x09\xa8\x9d\xd7\xa5\x94\xfd\x32\x42\x8f\x17\xa3\x5f\x48\xe8\x6b\x7c\x88\xd0\xaf\x64\x23\xd6\xc9\x4e\xfb\x6e\x1e\xb9\xab\x96\xb1\x78\xfa\x89\xe7\xd4\xe2\x01\x28\x6e\xe5\x61\xad\xe8\x7c\xac\x08\x55\x1d\x37\x0b\x7b\xa3\xf7\x60\x3b\xb8\x69\xca\x40\x57\xb3\x99\xe8\xe2\x3c\x89\x66\xbe\x39\xd1\x0a\x07\x72\xc7\xc3\x59\x90\xc7\x83\x93\xf5\x20\xc9\x99\x73\xa8\xb0\x21\xb4\xdc\xe8\x26\x14\xb1\x03\xea\x41\x70\x95\x46\xb5\x52\x1a\x95\xc8\x03\x6c\xcb\x28\xdb\x8a\x10\xb5\x2b\x78\xd2\xba\xd3\x3d\xd8\x88\x7f\x53\x2c\xb0\xe9\x5a\x1a\x3d\xba\x57\xa3\xda\x43\xb9\x9b\xef\x0e\x0a\xd9\x06\x5f\x11\xfa\x44\xc8\xcf\x14\x06\xba\xe7\x0f\x54\xcd\x0e\x1a\x03\xb9\x71\x81\x08\x67\x42\x7b\xe7\x7a\x2c\x06\x1b\xee\x69\x87\xe8\xa6\x49\xed\xa1\x21\xa0\x3c\xe3\xa6\x58\xd1\xcc\x9e\x9b\x6c\xca\x0c\xb3\xed\x78\x8f\xc4\x71\x89\x23\x09\xfc\xf1\x18\x45\xe7\x46\x4c\x19\x2b\x6e\xe8\x28\xd4\xc7\x46\xe8\x56\x8a\x0a\x1a\xee\xa8\x65\x44\xea\x5c\xa0\x15\x5f\x34\x61\x65\x32\xa4\xd1\xc1\x90\x6e\x51\x97\xcb\xa3\xb4\x47\x0a\xa4\x89\x90\x59\x39\x5a\xd5\x33\xa2\x0d\x28\xa2\x4f\x58\xd8\xd2\x7d\x49\xfe\x11\x25\xd6\x83\x8a\x07\xca\xb4\x45\xfd\x81\xba\x9b\xda\xfe\x3e\xfb\x53\xea\x84\xd1\x98\x6e\xa9\x39\xd2\x88\x4a\x65\xb1\x75\x5a\xcb\x41\x9b\x5b\x0b\xd5\x3d\xb6\x51\xc7\xd2\x69\x48\x23\x4d\xcb\xb1\x5b\xf9\x0e\x4b\x96\x0b\xbe\x56\xb7\xb9\x82\xec\x5d\x7a\x3f\xc1\xf0\x35\x9b\x4c\x33\x7d\x79\xa2\xa8\x16\xc3\x86\xd0\x62\x87\x8f\x9a\x61\x6a\xff\xeb\x50\x91\x45\x65\xaf\x09\x55\xbb\xe4\x76\x7b\x91\x6e\x9d\x97\x3f\x19\x46\xbe\xc6\xe7\x6b\xa6\x91\xbf\x62\xc4\xce\x05\x9e\xd8\x74\x5c\x5e\x50\x7f\xbd\x94\x7f\x1e\x8c\x22\xbb\x88\x6e\x9d\x46\xd3\x1c\xcd\xce\xbb\x79\x7f\x88\xdc\x70\xe6\x36\x3f\x56\x73\x3e\xa6\x79\x92\x5a\xad\x18\x1d\xd3\x14\x1a\x82\x14\xdb\x63\xcd\x3a\x2a\x9d\xc6\xec\xd1\x5c\x26\x8f\xea\x9b\x94\x11\xd4\x23\x43\x1a\xbb\x39\x68\x9b\x5b\x20\xc9\x9c\xca\xf1\xd8\xf0\x77\xb0\xba\xb9\x32\xea\x98\xba\x65\x2a\xae\xda\xa7\x4b\x64\xa1\x89\xe7\x6c\xd2\x9a\xdf\x85\x18\x8c\xee\xe2\x13\x37\x3c\x49\x16\xcc\x5d\x98\x40\xe3\x68\x07\x14\xc1\x76\xa8\x8e\x37\x9f\x3c\x97\x6d\xaa\x38\x4c\xd5\x9d\xdd\x21\x48\x14\x75\x29\xcb\x46\x59\x97\xbb\xad\x10\x7f\x6b\xe5\x1b\x1d\x3a\x30\x46\x59\x70\xf3\xf9\x24\xc5\x66\xd2\x64\x35\x3d\x93\x3a\x00\x10\xab\xaa\x0f\xf9\xe9\xc0\xdb\xfc\xda\x49\x98\x77\xbf\x43\x17\xc5\xa8\x22\x06\xc0\xf4\xbe\x14\xd6\xfd\x54\x13\x67\x66\xcf\xea\x55\x1d\xe4\x01\x4c\xcf\x4d\x3c\x31\x5b\xc0\xc8\xd5\x01\x63\x66\x8e\x12\x65\x6d\xd1\x85\x87\x1c\xde\x2c\x7b\xcb\xd2\x83\x14\xab\xb9\xab\x7c\xbb\x50\x51\x6d\x25\x19\xa0\x3a\x6e\xfa\xbb\x3c\xb7\x91\xea\x93\x20\x0a\xea\x37\xca\xee\x67\xb5\x4f\x6f\xc8\x95\x01\xe9\x72\x16\x82\x9a\x7e\xc6\x3c\x97\x1a\x19\x64\x7e\x9e\x3b\x23\x4b\xdc\xdc\x01\xbd\xdd\xc7\xcd\x41\x5e\xb2\x96\x44\xe9\x83\x6c\xdf\xbd\x7b\xda\xe6\x06\x44\xd8\xbc\x67\xf5\xb1\xbe\x3b\x2d\xbc\x6d\xe5\x5b\x38\x96\xe5\x42\xe4\xb7\x35\x7f\x74\xb3\xed\xcb\x25\x49\x35\x90\x23\x43\x84\xa3\xf2\x7d\xe9\xf0\xaa\xaa\x68\x5b\x86\x1b\x90\xf8\x3d\x4d\x48\xd2\x5d\xd2\x32\xd3\x7c\x81\x14\x0d\x4b\xad\x5e\x4d\xe2\xc9\x64\xe9\xbc\x98\xe6\x9d\xd1\xe1\x40\x2f\xcb\xac\x5f\x3f\x58\x35\x9b\x55\x77\x28\xb3\x67\x79\x2c\x74\xaf\x31\x23\x2a\x1a\x63\xd3\x76\x3f\xeb\x40\x3e\x94\x1f\xb3\xf3\xb8\x83\x24\xbf\x32\xa3\x8b\xa4\xd7\x02\xb9\x30\xb4\xf0\x91\xce\xcb\xa6\xcb\x0f\x79\x37\xb1\xd6\x4b\x7a\x7a\x19\x05\xca\x93\x64\xe6\xb4\xb4\xe9\x2e\xde\x4b\x8a\x47\xc6\xe6\xec\xe9\xd2\x18\x5e\x92\xde\x32\xdd\x93\x24\x2f\xb2\x12\x89\xfb\xfb\x36\xcd\x64\x43\x5f\x31\xfe\x6a\x90\xa7\x65\x76\xa9\x8c\x70\xd2\x6c\xe4\x6a\x66\x68\x51\x04\xb7\xcd\x70\xd5\x91\x86\xdc\x9c\xc8\x03\x0b\xa4\xbf\x7a\xe8\x82\x3c\x37\x94\xdb\xd6\xd3\xf9\x80\x03\x56\x5a\x4a\x94\x09\xf2\xcd\x64\xe1\x12\x1f\xf8\x98\x1e\xac\x1a\x61\x65\x5d\xdc\x5d\x1a\xdd\x03\x08\x2e\x42\x53\xc0\x2d\xb5\x31\xad\x58\x8f\x9b\x15\x93\xcc\xf3\x9a\xdc\x74\xe6\x49\x5d\xbe\x69\x2c\x27\xca\x4b\x78\xe4\x24\xe4\xf1\xe3\xe5\x6c\x37\x2c\xde\x67\xf5\x78\x87\xdd\x3f\xf2\xae\x97\x0e\x1f\x9b\x57\x10\xcb\x68\x67\xea\x94\x2e\xb7\xc0\x95\x65\x7e\x3e\x69\x71\x3e\x0a\xf1\xd8\xdc\xcd\x5a\xf4\xd5\x3b\x9c\xdc\x7f\x5f\xbf\x81\xba\x7e\xf3\x74\xab\xac\x7c\x93\x93\x5f\x62\x6d\x85\x28\xaf\xf1\xca\x27\xe7\xc7\xcf\xeb\x78\xf2\xe0\x4b\x6e\x11\x85\x90\x8c\x5b\xcf\x68\xea\x90\x73\x51\xb6\x83\x95\xc3\xae\x5f\x57\x17\xd5\xc4\xd1\x43\x2b\xef\xda\xa7\x9c\xb2\xaa\xa9\x37\x90\x6f\x7e\x7e\x4d\x2f\xc9\xa2\x6b\x2c\xca\xe8\x97\x76\xba\x90\x74\xbf\xc6\xfd\x8f\x6a\x5a\x0b\x43\xa3\x8a\xf2\x10\xe3\xf4\xdd\x37\xdf\x8c\xbc\x73\xeb\xfc\xfe\x9b\x37\x3f\xbf\xfe\xe6\xae\x7d\xfa\x4d\x5b\xdd\x82\x22\xf9\x72\x0f\x4a\x88\x3a\x68\x9f\xeb\xa5\x69\x8e\x9b\xf7\xa3\x57\x77\x13\xbc\xfd\x72\x45\x59\xdd\x16\x6f\x57\x19\x97\x86\x10\xae\xc9\xdc\xe9\x9a\xfa\xf5\xab\xef\x5f\xbe\x7d\xf7\x52\xe4\xd7\x15\x15\xa2\x32\x78\x40\x27\xe7\x92\xcc\xf9\xd3\x4d\x02\x57\xaa\x9a\x66\x29\xef\xf4\x19\xfd\x1e\x52\x55\xe0\xdc\x7b\x51\x22\x80\x5a\xae\x01\xca\x90\x45\xdf\xd7\x93\xca\x3c\x28\x11\x97\x51\x0b\x37\x54\x33\x23\xe5\xb5\xa0\xca\x92\xfe\x21\x9f\x7c\xe6\x0b\xd8\xff\x0b\xbb\xfa\x02\x2b\xfb\xbc\x33\x34\x52\xa1\x7d\xd0\xfb\x5d\x4b\x9c\xbe\xfc\x7f\x9a\x50\x6c\x50\xfc\x4f\x00\x00\x00\xff\xff\x91\x69\x30\x03\x55\x41\x00\x00")

func licenseBytes() ([]byte, error) {
	return bindataRead(
		_license,
		"LICENSE",
	)
}

func license() (*asset, error) {
	bytes, err := licenseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "LICENSE", size: 16725, mode: os.FileMode(436), modTime: time.Unix(1627483424, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x2a\xcd\xb3\xe2\xe2\x4c\xcf\x57\x28\x2a\xcd\x53\xc8\x4d\xcc\xcc\xd3\x4b\xcf\x57\xc8\x48\xcd\xc9\xc9\x07\x04\x00\x00\xff\xff\xe9\x2d\x09\xe7\x1a\x00\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 26, mode: os.FileMode(436), modTime: time.Unix(1627479562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xa8\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xe5\xe2\x52\x56\x56\x08\x2d\x4e\x4c\x4f\xe5\xe2\x4a\x48\x48\xe0\x52\x50\x50\x50\x48\xcf\x57\x28\x2a\xcd\x53\xc8\x4d\xcc\xcc\xd3\x4b\xcf\x57\xc8\x48\xcd\xc9\xc9\x07\x4b\x02\x02\x00\x00\xff\xff\x5e\xea\x98\x5a\x38\x00\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 56, mode: os.FileMode(436), modTime: time.Unix(1627483427, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdHelloGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x4d\x4b\xc4\x30\x18\x84\xcf\x79\x7f\xc5\x90\x83\xb4\x52\x1b\xc4\x5b\xc1\xd3\x5e\x3c\x79\xd8\x45\x3c\x88\x87\xb7\x49\xb6\x0d\xe6\xa3\xa4\x89\x20\xa5\xff\x5d\x76\x11\x61\xaf\xc3\x33\x33\x3c\x0b\xeb\x2f\x9e\x2c\x74\x30\x44\x2e\x2c\x29\x17\x34\x24\xbc\x1b\x21\xb7\xad\x7f\xe5\x60\xf7\x5d\x79\x37\x4a\x22\x21\x27\x57\xe6\x3a\xf6\x3a\x05\xb5\x2e\xe7\xc7\x27\xa5\xd3\x98\x59\x52\x4b\xa4\x14\x8e\x35\xe2\x90\x42\xe0\x68\xd0\xab\xc5\xc6\xc2\x73\x7a\xd0\xde\x21\xd7\x48\xdf\x9c\xf1\x62\xbd\x4f\x87\x60\xf0\x8c\xbb\x6b\xb5\xff\xe3\x37\x12\x6f\xab\x1d\x00\xc8\xf9\xc2\xc8\x8e\xc4\x69\x4e\xb9\x0c\x90\x27\xfe\xc1\x7f\x78\xac\x71\xc0\xb9\x46\xdd\xe8\x60\x70\x7f\x33\xd2\x81\xf3\xb4\xe2\xe3\x73\x2d\xd9\xc5\xa9\xc5\x46\xe2\x62\xd2\x5f\x6f\xdf\x53\xf6\xa6\x69\x49\xec\x1d\xed\xf4\x1b\x00\x00\xff\xff\x3e\xa7\x7e\x90\xf8\x00\x00\x00")

func cmdHelloGoBytes() ([]byte, error) {
	return bindataRead(
		_cmdHelloGo,
		"cmd/hello.go",
	)
}

func cmdHelloGo() (*asset, error) {
	bytes, err := cmdHelloGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/hello.go", size: 248, mode: os.FileMode(436), modTime: time.Unix(1627479562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdImportGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8c\x3d\xce\xc2\x30\x10\x44\xeb\x6f\x4f\x31\x4a\xf3\x25\x14\xb1\x10\x27\x40\x69\xe0\x18\x8e\xd7\xf9\x11\xde\x6c\x94\xb5\x2b\xc4\xdd\x91\x88\xdb\x99\xf7\xde\xee\xc3\xcb\xcf\x11\x41\x98\x68\x95\x5d\x8f\x8c\x66\x5e\xf3\x52\xc6\x3e\xa8\x38\xdb\xa7\xeb\xcd\x05\x1d\x0f\xdf\x10\x39\x87\xe7\xc9\xac\x86\x62\x91\x91\x15\xd5\xf2\x29\x41\x27\xe4\x25\x5a\x44\xcd\xfe\x1b\x82\x8a\xf8\x8d\x8d\xa6\xb2\x85\x6a\xb7\x87\x6a\x1e\x84\x71\xf9\x85\xfb\xe1\x64\x3a\xbc\xe9\xaf\x5e\xfd\x9d\xb9\xce\xed\x23\xa6\xa4\x83\x70\x47\x1f\xfa\x06\x00\x00\xff\xff\x89\x5b\x20\xee\xb0\x00\x00\x00")

func cmdImportGoBytes() ([]byte, error) {
	return bindataRead(
		_cmdImportGo,
		"cmd/import.go",
	)
}

func cmdImportGo() (*asset, error) {
	bytes, err := cmdImportGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/import.go", size: 176, mode: os.FileMode(436), modTime: time.Unix(1583848441, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goMod = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcd\x4f\x29\xcd\x49\x55\xa8\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xe5\xe2\x4a\xcf\x57\x30\xd4\x33\x34\xe3\xe2\x2a\x4a\x2d\x2c\xcd\x2c\x4a\x55\x48\xcf\x2c\xc9\x28\x4d\xd2\x4b\xce\xcf\xd5\x2f\x2e\x48\x33\x34\xd6\x4f\xce\x4f\x2a\x4a\x54\x28\x33\xd0\x33\xd0\x33\xe3\x02\x04\x00\x00\xff\xff\xff\x15\xe3\x03\x41\x00\x00\x00")

func goModBytes() ([]byte, error) {
	return bindataRead(
		_goMod,
		"go.mod",
	)
}

func goMod() (*asset, error) {
	bytes, err := goModBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go.mod", size: 65, mode: os.FileMode(436), modTime: time.Unix(1627483290, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _libMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\xc9\x4c\xe2\xe2\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x4a\xcb\x2d\x51\xe2\xe2\xd2\xd7\x57\xf0\x48\xcd\xc9\xc9\x0f\xcf\x2f\xca\x49\x51\x28\x4e\xac\x2c\x56\xc8\x00\xf1\xb9\xd2\x4a\xf3\x92\x91\xa4\x34\x34\x15\xaa\xb9\x38\xd3\x72\x4b\xf4\x02\x8a\x32\xf3\x4a\x72\xf2\x34\x94\xc0\x92\x0a\xe5\x20\x59\x25\x4d\xae\x5a\x2e\x40\x00\x00\x00\xff\xff\x8e\x4b\x06\x9f\x66\x00\x00\x00")

func libMainGoBytes() ([]byte, error) {
	return bindataRead(
		_libMainGo,
		"lib/main.go",
	)
}

func libMainGo() (*asset, error) {
	bytes, err := libMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lib/main.go", size: 102, mode: os.FileMode(436), modTime: time.Unix(1583848441, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x51\x4b\x6b\xdc\x30\x18\x3c\x5b\xbf\x62\x2a\x68\x59\x43\xb0\x09\xbd\xa5\xec\x29\xe4\x90\x4b\x5b\x48\x9a\x73\xb4\xd2\xe7\xb5\x5a\xbd\x90\x3e\x6f\xb2\x18\xff\xf7\xe2\xc7\x6e\x43\x0f\xbe\x78\x1e\xdf\xcc\x28\x29\xfd\x47\x1d\x09\x5e\xd9\x20\x84\xf5\x29\x66\xc6\x4e\x54\xb2\xf3\x2c\x45\x25\x63\x91\x42\x54\xda\x1b\xc8\x71\x6c\xbe\x2b\x4f\xd3\xd4\x6a\x6f\xe6\xbf\xf2\x68\xb9\x1f\x0e\x8d\x8e\xbe\x2d\xa9\xbb\xfd\xda\xea\x78\xc8\x4a\x8a\x5a\x88\xb6\xc5\x0b\xe5\x62\x63\x40\xec\x70\x95\x36\xf8\x71\xa2\xfc\x96\x2d\x33\x05\x98\x21\xdb\x70\xc4\x61\xb0\xce\x88\x93\xca\x38\x6d\x92\x3d\xa4\xa1\x13\xb9\x98\x3c\x05\x96\x8b\x5d\x8e\x91\xef\xbd\x41\xa6\x94\xa9\x50\xe0\x02\xee\x09\x07\x55\x08\x3a\x7a\xaf\x82\xc1\x5b\x4f\x01\x5a\x39\x47\x06\x6f\x96\xfb\x38\x30\x54\x38\xa3\x0c\x87\x8d\x52\x96\x3b\x17\xaf\x3d\xbe\x2c\x91\x9b\xfb\x15\x1d\x45\xf5\xab\xd0\x1d\xf0\xa1\xad\xbc\x11\xd5\x53\x1f\x33\xdf\x7d\xf8\x09\x5b\x30\x14\x32\x50\x05\x0a\x85\x55\x66\xca\xd0\xce\x22\xe5\xf8\x9b\x34\xcb\x1b\x31\x09\xd1\x0d\x41\x2f\xd3\xee\x6a\x8c\xa2\x7a\x78\x27\x3d\x30\xed\xb6\x9a\xf5\x4c\x69\x5b\x3c\xae\xab\x47\xee\x67\x8f\x4b\xce\x45\x6b\x83\xe5\x55\xab\xbd\x69\x56\xe2\x6e\x4b\x7f\x91\x6f\xae\x50\xc6\x14\x28\xe7\xa0\x7b\xeb\xcc\xd5\x08\x1c\x97\xa1\x66\xd5\x75\xa8\xf9\x2b\xc4\x05\x9d\x53\xc7\x02\x95\x52\x8e\x29\x5b\xc5\xe4\xce\xcd\x6c\xfa\xdc\xdb\x32\x97\xdc\xc6\x3c\x9c\x97\x1a\xcd\xda\xa5\xc1\x23\x23\x06\x77\x46\x20\x5a\x2f\xf4\x2a\x25\x0a\x88\x41\xd3\xc7\x83\xf7\xde\x34\x6b\x93\xff\xba\xa3\xf0\xfc\xf6\x4b\xb5\x0b\xf1\xe5\xfa\xfa\x1b\xe9\x1f\xf4\x44\xbc\xa1\xcf\xe4\x93\x53\x4c\xbb\xd7\x71\x94\xe3\x28\xa7\x29\x65\x1b\xb8\x83\xfc\x5c\x24\x9a\x4d\xb9\x00\x72\x9a\xc4\x6b\x2d\x2a\xdb\x81\x72\xc6\xdd\xfe\x1a\xe9\x12\xa6\xfe\xb6\x20\x9f\xf6\x08\xd6\xcd\x51\xaa\xce\x73\xf3\x73\x36\x74\x61\x47\x39\xd7\xa2\xaa\x62\x69\x1e\xde\x2d\xef\x6e\x6b\x51\x4d\x62\x12\x7f\x03\x00\x00\xff\xff\xff\xc5\xf7\xfd\x33\x03\x00\x00")

func mainGoBytes() ([]byte, error) {
	return bindataRead(
		_mainGo,
		"main.go",
	)
}

func mainGo() (*asset, error) {
	bytes, err := mainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.go", size: 819, mode: os.FileMode(436), modTime: time.Unix(1627482452, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"CHANGELOG.md":  changelogMd,
	"LICENSE":       license,
	"Makefile":      makefile,
	"README.md":     readmeMd,
	"cmd/hello.go":  cmdHelloGo,
	"cmd/import.go": cmdImportGo,
	"go.mod":        goMod,
	"lib/main.go":   libMainGo,
	"main.go":       mainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"CHANGELOG.md": &bintree{changelogMd, map[string]*bintree{}},
	"LICENSE":      &bintree{license, map[string]*bintree{}},
	"Makefile":     &bintree{makefile, map[string]*bintree{}},
	"README.md":    &bintree{readmeMd, map[string]*bintree{}},
	"cmd": &bintree{nil, map[string]*bintree{
		"hello.go":  &bintree{cmdHelloGo, map[string]*bintree{}},
		"import.go": &bintree{cmdImportGo, map[string]*bintree{}},
	}},
	"go.mod": &bintree{goMod, map[string]*bintree{}},
	"lib": &bintree{nil, map[string]*bintree{
		"main.go": &bintree{libMainGo, map[string]*bintree{}},
	}},
	"main.go": &bintree{mainGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
